package no.nav.tilleggsstonader.sak.vedtak.l칝remidler.domain

import no.nav.tilleggsstonader.kontrakter.felles.Mergeable
import no.nav.tilleggsstonader.kontrakter.felles.Periode
import no.nav.tilleggsstonader.kontrakter.felles.mergeSammenhengende
import no.nav.tilleggsstonader.sak.vedtak.domain.St칮nadsperiodeBeregningsgrunnlag
import no.nav.tilleggsstonader.sak.vilk친r.vilk친rperiode.domain.AktivitetType
import no.nav.tilleggsstonader.sak.vilk친r.vilk친rperiode.domain.M친lgruppeType
import java.time.LocalDate

object VedtaksperiodeL칝remidlerMapper {

    fun mapTilVedtaksperiode(
        beregningsresultatForM친ned: List<BeregningsresultatForM친ned>,
    ): List<VedtaksperiodeL칝remidler> {
        return beregningsresultatForM친ned
            .map { tilVedtaksperioder(it) }
            .sorted()
            .mergeSammenhengende { s1, s2 -> s1.erLikOgP친f칮lgesAv(s2) }
    }

    private fun tilVedtaksperioder(
        it: BeregningsresultatForM친ned,
    ) = with(it.grunnlag) {
        VedtaksperiodeL칝remidler(
            fom = fom,
            tom = tom,
            m친lgruppe = m친lgruppe,
            aktivitet = aktivitet,
//            studieniv친 = TOOD()
        )
    }

    data class VedtaksperiodeL칝remidler(
        override val fom: LocalDate,
        override val tom: LocalDate,
        val m친lgruppe: M친lgruppeType,
        val aktivitet: AktivitetType,
    ) : Periode<LocalDate>, Mergeable<LocalDate, VedtaksperiodeL칝remidler> {

        init {
            validatePeriode()
        }

        constructor(st칮nadsperiode: St칮nadsperiodeBeregningsgrunnlag, antallBarn: Int) : this(
            fom = st칮nadsperiode.fom,
            tom = st칮nadsperiode.tom,
            m친lgruppe = st칮nadsperiode.m친lgruppe,
            aktivitet = st칮nadsperiode.aktivitet,
            // studieniv친
        )

        /**
         * Ettersom st칮nadsperiode ikke overlapper er det tilstrekkelig 친 kun merge TOM
         */
        override fun merge(other: VedtaksperiodeL칝remidler): VedtaksperiodeL칝remidler {
            return this.copy(tom = other.tom)
        }

        fun erLikOgP친f칮lgesAv(other: VedtaksperiodeL칝remidler): Boolean {
            val erLik = this.aktivitet == other.aktivitet &&
                    this.m친lgruppe == other.m친lgruppe // && studieniv친 游뱂?
            val p친f칮lgesAv = this.tom.plusDays(1) == other.fom
            return erLik && p친f칮lgesAv
        }
    }
}