package no.nav.tilleggsstonader.sak.migrering.routing

import no.nav.tilleggsstonader.kontrakter.arena.ArenaStatusDto
import no.nav.tilleggsstonader.kontrakter.felles.ObjectMapperProvider.objectMapper
import no.nav.tilleggsstonader.kontrakter.ytelse.TypeYtelsePeriode
import no.nav.tilleggsstonader.libs.log.logger
import no.nav.tilleggsstonader.libs.unleash.UnleashService
import no.nav.tilleggsstonader.sak.behandling.BehandlingService
import no.nav.tilleggsstonader.sak.fagsak.FagsakService
import no.nav.tilleggsstonader.sak.infrastruktur.database.JsonWrapper
import no.nav.tilleggsstonader.sak.infrastruktur.unleash.UnleashUtil.getVariantWithNameOrDefault
import no.nav.tilleggsstonader.sak.opplysninger.arena.ArenaService
import no.nav.tilleggsstonader.sak.opplysninger.ytelse.HarAktivtVedtakDto
import no.nav.tilleggsstonader.sak.opplysninger.ytelse.YtelseService
import org.springframework.stereotype.Service

@Service
class S칮knadRoutingService(
    private val s칮knadRoutingRepository: S칮knadRoutingRepository,
    private val fagsakService: FagsakService,
    private val arenaService: ArenaService,
    private val behandlingService: BehandlingService,
    private val unleashService: UnleashService,
    private val ytelseService: YtelseService,
) {
    fun sjekkRoutingForPerson(routingContext: RoutingContext): S칮knadRoutingResponse {
        val skalBehandlesINyL칮sning = skalBehandlesINyL칮sning(routingContext)
        logger.info(
            "routing - " +
                "st칮nadstype=${routingContext.s칮knadstype} " +
                "skalBehandlesINyL칮sning=$skalBehandlesINyL칮sning",
        )
        return S칮knadRoutingResponse(skalBehandlesINyL칮sning = skalBehandlesINyL칮sning)
    }

    fun harLagretRouting(
        ident: String,
        s칮knadstype: S칮knadstype,
    ): Boolean {
        // TODO: Trenger vi 친 strukture dette litt annerledes slik at vi slipper strategi.ident osv?游뱂
        val s칮knadRouting = s칮knadRoutingRepository.findByIdentAndType(ident, s칮knadstype)
        return s칮knadRouting != null
    }

    private fun skalBehandlesINyL칮sning(context: RoutingContext): Boolean {
        if (harLagretRouting(context.ident, context.s칮knadstype)) {
            logger.info("routing - s칮knadstype=${context.s칮knadstype} harLagretRouting=true")
            return true
        }

        when (context) { // TODO: Dette er kode som burde ligge inni hver strategi i stedet for ?游뱂
            is SkalRouteAlleS칮kereTilNyL칮sning -> {
                logger.info("routing - s칮knadstype=${context.s칮knadstype} skalRuteAlleS칮kere=true")
                lagreRouting(context, mapOf("ruterAlleS칮kere" to true))
                return true
            }

            is SkalRouteEnkelteS칮kereTilNyL칮sning -> {
                return vurderRoutingTilNyL칮sning(context)
            }
        }
    }

    private fun vurderRoutingTilNyL칮sning(context: SkalRouteEnkelteS칮kereTilNyL칮sning): Boolean {
        if (harBehandling(context)) {
            lagreRouting(context, mapOf("harBehandling" to true))
            return true
        }
        if (maksAntallErN친dd(context)) {
            return false
        }
        val arenaStatuser =
            context.s칮knadstype.tilSt칮nadstyper().map {
                arenaService.hentStatus(context.ident, it)
            }
        if (harAktivtVedtakIArena(context.s칮knadstype, arenaStatuser).any { it }) {
            return false
        }
        if (context.s칮knadstype == S칮knadstype.DAGLIG_REISE) {
            if (harAktivtAapVedtak(ytelseService.harAktivtAapVedtak(context.ident))) {
                lagreRouting(context, arenaStatuser)
                return true
            } else {
                return false
            }
        }

        lagreRouting(context, arenaStatuser)
        return true
    }

    private fun maksAntallErN친dd(contekst: SkalRouteEnkelteS칮kereTilNyL칮sning): Boolean {
        val maksAntall = unleashService.getVariantWithNameOrDefault(contekst.toggleId, "antall", 0)
        val antall = s칮knadRoutingRepository.countByType(contekst.s칮knadstype)
        logger.info("routing - st칮nadstype=${contekst.s칮knadstype} antallIDatabase=$antall toggleMaksAntall=$maksAntall")
        return antall >= maksAntall
    }

    private fun harAktivtVedtakIArena(
        s칮knadstype: S칮knadstype,
        arenaStatuser: Collection<ArenaStatusDto>,
    ): List<Boolean> =
        arenaStatuser.map { arenaStatus ->
            arenaStatus.vedtak.harAktivtVedtak
                .also { loggArenaStatus(arenaStatus, s칮knadstype, it) }
        }

    private fun loggArenaStatus(
        arenaStatus: ArenaStatusDto,
        s칮knadstype: S칮knadstype,
        harGyldigStatus: Boolean,
    ) {
        val harAktivtVedtak = arenaStatus.vedtak.harAktivtVedtak
        val harVedtakUtenUtfall = arenaStatus.vedtak.harVedtakUtenUtfall
        val harVedtak = arenaStatus.vedtak.harVedtak
        val harAktivSakUtenVedtak = arenaStatus.sak.harAktivSakUtenVedtak

        logger.info(
            "routing - s칮knadstype=$s칮knadstype harGyldigStatusArena=$harGyldigStatus - " +
                "harAktivSakUtenVedtak=$harAktivSakUtenVedtak " +
                "harVedtak=$harVedtak " +
                "harAktivtVedtak=$harAktivtVedtak " +
                "harVedtakUtenUtfall=$harVedtakUtenUtfall " +
                "vedtakTom=${arenaStatus.vedtak.vedtakTom}",
        )
    }

    private fun lagreRouting(
        context: RoutingContext,
        detaljer: Any,
    ) {
        s칮knadRoutingRepository.insert(
            S칮knadRouting(
                ident = context.ident,
                type = context.s칮knadstype,
                detaljer = JsonWrapper(objectMapper.writeValueAsString(detaljer)),
            ),
        )
    }

    // N친 blir brukere som har en behandlig p친 daglig reise (enten det er TSO eller TSR) rutet til ny s칮knad
    private fun harBehandling(context: RoutingContext): Boolean {
        val harBehandling =
            context.s칮knadstype
                .tilSt칮nadstyper()
                .mapNotNull { fagsakService.finnFagsak(personIdenter = setOf(context.ident), st칮nadstype = it) }
                .map { behandlingService.hentBehandlinger(fagsakId = it.id) }
                .isNotEmpty()

        logger.info("routing - st칮nadstype=${context.s칮knadstype} harBehandling=$harBehandling")
        return harBehandling
    }

    private fun harAktivtAapVedtak(vedtakStatus: HarAktivtVedtakDto): Boolean =
        vedtakStatus.type == TypeYtelsePeriode.AAP && vedtakStatus.harAktivtVedtak
}
